"Name"     = 'GoldParser program language Syntax'
"Author"   = 'Sara Adel'
"Version"  = '1.0'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Integer       = {digit}+

! -------------------------------------------------
! Rules
! -------------------------------------------------

<Program> ::= 'start' <StatementList> 'end'

<StatementList> ::= 
               | <StatementList> <Statement>
               | <Statement>

<Statement> ::= <VariableDeclaration>
             | <IfStatement> | <SwitchStatement> 
             | <ForLoop> | <WhileLoop> | <DoWhileLoop>

<VariableDeclaration> ::= Identifier '=' <Expression>

! <Type> ::= 'int' | 'string' | 'bool'

<IfStatement> ::= 'if' <Expression> 'then' <StatementList> 
               |'if' <Expression> 'then' <StatementList> 'else' <StatementList> 

<SwitchStatement> ::= 'switch' <Expression> '{' <CaseList> <Default> '}'

<CaseList> ::= 
           | <CaseList> 'case' <Expression> 'do' <StatementList> 'break'
           | 'case' <Expression> 'do' <StatementList> 'break'
           

<Default> ::= 'default' 'do' <StatementList> 'break'

<ForLoop> ::= 'for' '(' <Initialization> ';' <Expression> ';' <IncDec> ')' '{' <StatementList> '}'
<Initialization> ::= Identifier '=' <Expression>
<IncDec>::= Identifier '++'
         | Identifier '--'            

<WhileLoop> ::= 'while' <Expression> 'then' <StatementList>

<DoWhileLoop> ::= 'do' <StatementList> 'while' <Expression> 


<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '<>' <Add Exp>    !Not equal
               |  <Add Exp>

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value>
               
<Value>       ::= Identifier
               |Integer
               |StringLiteral
               |  '(' <Expression> ')'
